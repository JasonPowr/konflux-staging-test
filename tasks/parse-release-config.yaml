---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: parse-release-config
spec:
  workspaces:
    - name: output
  stepTemplate:
    env:
      - name: HOME
        value: /workspace
    image: quay.io/konflux-ci/appstudio-utils:48c311af02858e2422d6229600e9959e496ddef1@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8
    workingDir: /workspace/output/source
  params:
    - name: releases
      description: "An array of YAML-defined release configurations"
    - name: env
      description: Release environment should be one of stage/prod
  results:
    - name: release-component
      description: Indicates whether to execute the component release process
    - name: component-release-plan-dir
      description: Directory where the component release plans are stored
    - name: component-release-dir
      description: Directory where the component releases are stored
    - name: release-operator
      description: Indicates whether to execute the operator release process
    - name: operator-release-plan-dir
      description: Directory where the operator release plans are stored
    - name: operator-release-dir
      description: Directory where the operator releases are stored
    - name: release-fbc
      description: Indicates whether to execute the FBC release process
    - name: fbc-release-plan-dir
      description: Directory where the FBC release plans are stored
    - name: fbc-release-dir
      description: Directory where the FBC releases are stored
  steps:
    - name: validate-config
      script: |
        #!/bin/bash
        set -euo pipefail

        RELEASES="$(params.releases)"
        ENV="$(params.env)"

        # Only one componant release is allowed
        COMPONENT_COUNT=$(echo "$RELEASES" | yq '[.[] | select(.type == "component")] | length')
        if [ "$COMPONENT_COUNT" -gt 1 ]; then
          echo "ERROR: Found $COMPONENT_COUNT component items. Only 1 is allowed."
          exit 1
        fi

        # Only one operator release is allowed
        OPERATOR_COUNT=$(echo "$RELEASES" | yq '[.[] | select(.type == "operator")] | length')
        if [ "$OPERATOR_COUNT" -gt 1 ]; then
          echo "ERROR: Found $OPERATOR_COUNT operator items. Only 1 is allowed."
          exit 1
        fi

        # Only one fbc release is allowed
        FBC_COUNT=$(echo "$RELEASES" | yq '[.[] | select(.type == "fbc")] | length')
        if [ "$FBC_COUNT" -gt 1 ]; then
          echo "ERROR: Found $FBC_COUNT fbc items. Only 1 is allowed."
          exit 1
        fi

        # Type should only be equal to component,operator or fbc
        INVALID_TYPES="$(echo "$RELEASES" | yq '.[].type' | grep -vE '^(component|operator|fbc)$' || true)"
        if [[ -n "${INVALID_TYPES}" ]]; then
          echo "ERROR: Invalid 'type' found in release(s): ${INVALID_TYPES}"
          echo "       Valid types are component,operator or fbc only."
          exit 1
        fi

        # Env should only be equal to stage or prod
        if [[ "$ENV" != "stage" && "$ENV" != "prod" ]]; then
          echo "ERROR: Invalid 'env' parameter. Must be 'stage' or 'prod', got: ${ENV}"
          exit 1
        fi

        # Make sure `release` is strictly `true` or `false`
        INVALID_RELEASES="$(echo "$RELEASES" | yq '.[].release' | grep -vE '^(true|false)$' || true)"
        if [[ -n "$INVALID_RELEASES" ]]; then
          echo "ERROR: Invalid 'release' value(s) found: ${INVALID_RELEASES}"
          echo "       Valid 'release' values are 'true' or 'false' only."
          exit 1
        fi

        echo "Release Config Validated..."

    - name: parse-release-config
      script: |
        #!/bin/bash
        set -euo pipefail

        RELEASES="$(params.releases)"
        RELEASE_COMPONENT="$(echo "$RELEASES" | yq '.[] | select(.type == "component") | .release')"
        COMPONENT_RELEASE_PLAN_DIR="$(echo "$RELEASES" | yq '.[] | select(.type == "component") | .releasePlanDir')"
        COMPONENT_RELEASE_DIR="$(echo "$RELEASES" | yq '.[] | select(.type == "component") | .releaseDir')"

        RELEASE_OPERATOR="$(echo "$RELEASES" | yq '.[] | select(.type == "operator") | .release')"
        OPERATOR_RELEASE_PLAN_DIR="$(echo "$RELEASES" | yq '.[] | select(.type == "operator") | .releasePlanDir')"
        OPERATOR_RELEASE_DIR="$(echo "$RELEASES" | yq '.[] | select(.type == "operator") | .releaseDir')"

        RELEASE_FBC="$(echo "$RELEASES" | yq '.[] | select(.type == "fbc") | .release')"
        FBC_RELEASE_PLAN_DIR="$(echo "$RELEASES" | yq '.[] | select(.type == "fbc") | .releasePlanDir')"
        FBC_RELEASE_DIR="$(echo "$RELEASES" | yq '.[] | select(.type == "fbc") | .releaseDir')"

        echo "Environment: "$(params.env)""

        echo ""
        echo "Component Config:"
        echo "RELEASE_COMPONENT: $RELEASE_COMPONENT"
        echo "COMPONENT_RELEASE_PLAN_DIR: $COMPONENT_RELEASE_PLAN_DIR"
        echo "COMPONENT_RELEASE_DIR: $COMPONENT_RELEASE_DIR"

        echo ""
        echo "Operator Config:"
        echo "RELEASE_OPERATOR: $RELEASE_OPERATOR"
        echo "OPERATOR_RELEASE_PLAN_DIR: $OPERATOR_RELEASE_PLAN_DIR"
        echo "OPERATOR_RELEASE_DIR: $OPERATOR_RELEASE_DIR"

        echo ""
        echo "FBC Config:"
        echo "RELEASE_FBC: $RELEASE_FBC"
        echo "FBC_RELEASE_PLAN_DIR: $FBC_RELEASE_PLAN_DIR"
        echo "FBC_RELEASE_DIR: $FBC_RELEASE_DIR"

        echo -n "$RELEASE_COMPONENT" > $(results.release-component.path)
        echo -n "$COMPONENT_RELEASE_PLAN_DIR" > $(results.component-release-plan-dir.path)
        echo -n "$COMPONENT_RELEASE_DIR" > $(results.component-release-dir.path)
        echo -n "$RELEASE_OPERATOR" > $(results.release-operator.path)
        echo -n "$OPERATOR_RELEASE_PLAN_DIR" > $(results.operator-release-plan-dir.path)
        echo -n "$OPERATOR_RELEASE_DIR" > $(results.operator-release-dir.path)
        echo -n "$RELEASE_FBC" > $(results.release-fbc.path)
        echo -n "$FBC_RELEASE_PLAN_DIR" > $(results.fbc-release-plan-dir.path)
        echo -n "$FBC_RELEASE_DIR" > $(results.fbc-release-dir.path)
