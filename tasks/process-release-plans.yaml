apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: process-release-plans
spec:
  workspaces:
    - name: output
  stepTemplate:
    env:
      - name: HOME
        value: /workspace
    image: quay.io/konflux-ci/appstudio-utils:48c311af02858e2422d6229600e9959e496ddef1@sha256:91ddd999271f65d8ec8487b10f3dd378f81aa894e11b9af4d10639fd52bba7e8
    workingDir: /workspace/output/source
  params:
    - name: component-release-plan-dir
      type: string
      default: ""
      description: The directory where the component release plans are located.
    - name: fbc-release-plan-dir
      type: string
      default: ""
      description: The directory where the FBC release plans are located.
    - name: env
      type: string
      default: stage
      description: Release environment should be one of stage/prod
  results:
    - name: component-release-plans
      type: array
    - name: fbc-release-plans
      type: array
  steps:
    - name: validate-kind
      script: |
        #!/bin/bash
        set -euo pipefail

        validate_kind() {
          local dir=$1

          if [ -n "$dir" ] && [ -d "$dir" ]; then
            for file in "$dir"/*.yaml; do
              if [ -f "$file" ]; then
                echo "Validating kind in file: $file"
                KIND=$(yq e '.kind' "$file")
                if [ "$KIND" != "ReleasePlan" ]; then
                  echo "Error: File $file has kind $KIND, expected ReleasePlan"
                  exit 1
                fi
              fi
            done
          fi
        }

        validate_kind "$(params.component-release-plan-dir)"
        validate_kind "$(params.fbc-release-plan-dir)"

    - name: validate-prod-label
      script: |
        #!/bin/bash
        set -euo pipefail

        validate_prod_label() {
          local dir=$1

          if [ -n "$dir" ] && [ -d "$dir" ]; then
            for file in "$dir"/*.yaml; do
              if [ -f "$file" ]; then
                echo "Checking presence of 'release.rhtas.prod/releasePlanAdmission' label in file: $file"
                
                label_value=$(yq e '.metadata.labels."release.rhtas.prod/releasePlanAdmission" // "null"' "$file")
                if [ "$label_value" = "null" ]; then
                  echo "Error: File $file is missing the label 'release.rhtas.prod/releasePlanAdmission'"
                  exit 1
                fi
              fi
            done
          fi
        }

        validate_prod_label "$(params.component-release-plan-dir)"
        validate_prod_label "$(params.fbc-release-plan-dir)"

    - name: "generate-prod-resources"
      script: |
        #!/bin/bash
        set -euo pipefail

        ENV="$(params.env)"
        if [ "$ENV" == "stage" ]; then
          echo "Staging enviroment found, skipping step..."
          exit 0
        fi

        generate_prod_resources() {
          local dir=$1

          if [ -n "$dir" ] && [ -d "$dir" ]; then
            for file in "$dir"/*.yaml; do
              if [ -f "$file" ]; then
                prod_rpa=$(yq e '.metadata.labels."release.rhtas.prod/releasePlanAdmission"' "$file")
                stage_rpa=$(yq e '.metadata.labels."release.appstudio.openshift.io/releasePlanAdmission"' "$file")
                echo "Replacing staging RPA: '${stage_rpa}' with the production one: '${prod_rpa}' in file: ${file}"
                yq e -i '.metadata.labels."release.appstudio.openshift.io/releasePlanAdmission" = "'"$prod_rpa"'"' "$file"
              fi
            done
          fi
        }

        generate_prod_resources "$(params.component-release-plan-dir)"
        generate_prod_resources "$(params.fbc-release-plan-dir)"

    - name: gather-file-paths
      script: |
        #!/bin/bash
        set -euo pipefail

        list_files() {
          local dir=$1
          local result=$2

          if [ -n "$dir" ]; then
            dir="/workspace/output/source/$dir"
            if [ -d "$dir" ]; then
              files=$(find "$dir" -name '*.yaml' -print | jq -R -s 'split("\n")[:-1]')
              echo "$files" > "$result"
            else
              echo "[]" > "$result"
            fi
          else
            echo "[]" > "$result"
          fi
        }

        list_files "$(params.component-release-plan-dir)" "$(results.component-release-plans.path)"
        list_files "$(params.fbc-release-plan-dir)" "$(results.fbc-release-plans.path)"

## Other steps can be defined here for extra processing or validation
